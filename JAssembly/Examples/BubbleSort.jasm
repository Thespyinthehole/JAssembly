#Bubble sort
index = r0
return = r1
value = r2
accessindex = r3
changed = r4
holder = r5
temp = r6
swapreturn = r7

a = 99
b = 60
c = 40
d = 20
e = 7

LDR index 1

writea:
    LDR value a
    LDR return writeb
    JMP write

writeb:
    INC index
    LDR value b
    LDR return writec
    JMP write

writec:
    INC index
    LDR value c
    LDR return writed
    JMP write

writed:
    INC index
    LDR value d
    LDR return writee
    JMP write

writee:
    INC index
    LDR value e
    LDR return sort
    JMP write

sort: 
    LDR changed 0
    LDR index 0
    for:
        CMP index 4
        JMPZ donefor
        LDR return readcurrent
        JMP read
        readcurrent:
            LDR holder value
            INC index
            LDR return readnext
            JMP read
        readnext:
            CMP value holder
            JMPG noswap
            LDR swapreturn noswap    
            JMP swap

        noswap:
            JMP for

    donefor:
        CMP changed 0
        JMPZ done
        JMP sort

done:
    HALT

swap: #Swaps the value at the given index for the value in the holder parameter
    LDR temp value
    LDR return swapa
    JMP read
    swapa:
        INC index
        LDR value holder
        LDR return doneswapa
        JMP write
    doneswapa:
        DEC index
        LDR value temp
        LDR return swapb
        JMP write
    swapb:    
        INC changed
        JMP swapreturn

read: #Read from the offset at the given index in the index parameter
    PUSH accessindex m+29
    ADD accessindex index
    MOV m+4 accessindex
    LDR value m+0
    JMP return

write:  #Write to the offset at the given index in the index parameter
    PUSH accessindex m+15
    ADD accessindex index
    MOV m+3 accessindex
    MOV m+0 value
    JMP return
    